Devon SchudyApr 25 7:16 PM

John Wiltshire wrote:
> I’m not sure it would be easy to move the C++ to Objective C (iOS) or
> Java (Android) without breaking something.

I don't think it would be particularly hard. Grobots is only 18k lines (and could be simplified a bit), and doesn't depend much on many C++-specific features, except for immediate values (GBNumber and GBFinePoint). GBNumber could simply be replaced with float, and if GBFinePoint allocation is a problem, we could pool and reuse them.


If I were translating to Java, I would:
 1) Replace all uses of GBNumber or GBLongNumber with float or double. (I've done some work toward this already.)

 2) Get rid of useless accessors (why did I write those?) and the silly GB prefix.
 3)Verify that it all still works (in C++).

 4) Pick some fairly self-contained piece, such as HardwareSpec, and translate it to Java, which mostly means moving methods to their classes, removing const and explicit pointers, heap-allocating everything, and using Java libraries (strings and vectors) instead of C++ ones.
 5) Comment out any dependencies on untranslated parts (e.g. simulation), and make sure it compiles.
 6) Translate the rest of sides/* and its dependencies, aiming to be able to load hardware and then complete sides.
 7) Verify that side loading works by comparing costs and masses to the C++ version.

 8) Translate StackBrainSpec, so code loading works. (For speed, the code enums should probably be integer constants, not Java enums.)

 9) Translate the non-simulation-related parts of StackBrain until it can run.

10) Verify that sides with (non-simulation-related) code load and run correctly.

11) Translate simulation/*. This is the largest part. (Note that DeletionListener is not needed, since we have GC.)
12) Translate other parts that depend on the simulation, and headless mode.

13) Verify that headless mode works, and produces plausible tournament scores. (If it doesn't, debugging will be hard without the GUI.)

13) Translate Portal, using Swing and Java2D instead of GBView and GBGraphics. Incorporate the menus.

14) Debug - a lot of the GUI code is new.
15) Make framerate and redrawing work cleanly (this has been hard on other platforms).

16) Make an applet version. Put it on the website.

17) Translate the roster, Types view and minimap, probably as panes instead of separate windows. Use Swing components instead of homemade equivalents.
18) Optimize as necessary.
19) Translate less important features: sound (can it be relative to the viewport?), other less important views.

This is only a few weeks' work (depending on how much trouble there is with Swing). The improved portability (at last, complete Windows and Unix GUIs!) might be worth the effort. It would also be easier to add new features like View Source or even an editor. A Java implementation also offers an interesting optimization opportunity: JVM code isn't too hard to generate, so we could emit that instead of interpreting our own bytecode. We might also be able to adapt other languages' existing JVM implementations to control robots. (The hard part is adding deterministic time limits.)

    

> The UI would also need a complete overhaul for the tablet/phone form
> factors that don’t really allow overlapping windows.


The multiple windows are rather annoying anyway, so I wouldn't miss them. On a tablet, zooming is more natural, so the minimap could be replaced by zooming the main view. I think we'd end up with three screens: the roster (including tournament scores and statistics for the selected side), the main view, and the side/types view (with more statistics).


The small screen would be a problem, though. It would probably take significant rule changes (to reduce interaction distances and movement speeds) to be watchable.


Grobots would also do terrible things to battery life.